// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require("Verifier");
const proof = require("../../zokrates/code/square/proof.json");

contract("SquareVerifier", (accounts) => {
	const account = accounts[0];

	describe("proof verification", async () => {
		beforeEach(async () => {
			this.contract = await SquareVerifier.new({ from: account });
		});

		// Test verification with correct proof
		// - use the contents from proof.json generated from zokrates steps
		it("(proof) will pass if correct", async () => {
			let result = await this.contract.verifyTx.call(
				proof.proof.a,
				proof.proof.b,
				proof.proof.c,
				proof.inputs
			);
			assert.equal(
				result,
				true,
				"Verification failed when proof was correct"
			);
		});
		// Test verification with incorrect proof
		it("(proof) will fail if incorrect", async () => {
			let result = await this.contract.verifyTx.call(
				proof.proof.a,
				proof.proof.b,
				proof.proof.c,
				[6, 9]
			);
			assert.equal(
				result,
				false,
				"Verification should not have passed due to incorrect proof"
			);
		});
	});
});
